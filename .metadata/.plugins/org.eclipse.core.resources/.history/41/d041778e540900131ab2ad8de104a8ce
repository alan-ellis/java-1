
public class Queue implements QueueInterface{
	private static final int DEFAULT_CAPACITY = 10;
	private Object[] objects;
	private int front,back,curr,cap;
	
	Queue(){
		front = 0;
		back = -1; 
		curr = 0;
		cap = DEFAULT_CAPACITY;
		objects = new Object[10];
	}
	
	public Object dequeue(){
		if(isEmpty()) return null;
		Object result = objects[front];
		objects[front] = null;
		front = (front++)%cap;
		curr--;
		return result;
	}
	
	public void enqueue(Object item){
		if(isFull()){
			doubleSize();
		}
		back = (back+1)%cap;
		objects[back] = item;
		curr++;
	}
	
	public boolean isEmpty(){
		return curr == 0;
	}
	
	public Object getFront(){
		if (isEmpty()) return null;
		return objects[front];
	}
	
	public void clear() {
		for(int i = front; i!= back; i = (i++)%cap){
			objects[i]=null;
		}
		front = 0;
		back = -1;
		curr = 0;
	}
	
	public boolean isFull(){
		return curr == cap;
	}
	public void doubleSize(){
		Object[] doubleObjects = new Object[cap*2];
		int j = 0;
		for(int i = front; i!= back; i = (i++)%cap){
			doubleObjects[j] = objects[i];
			j++;
		}
		front = 0;
		back = j;
		cap = cap*2;
	}
	// for test purpose only
	public Object get(int index){
		if (index>= cap) return null;
		return objects[index];
		
	}
}
